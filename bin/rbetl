#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'rbetl.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Rbetl

  main do
    @input_node = nil
    @process_node = nil
    @output_node = nil
    if options[:input].nil?
      @input_node = EtlNode.new
    else
      @input_node = InputFile.new(options[:input])
    end
    if options[:process].nil?
      @process_node = @input_node
    else
      compare = lambda{ |line,pattern| line.include?(pattern)}
      if options[:regex]
        compare = lambda{ |line,pattern| line =~ /#{pattern}/}
      end
      process = options[:process]
      if process =~ /^PATTERN/
        split_char = process[7]
        params = process.split(split_char)
        if params[1].nil? || params[2].nil?
          error("Process PATTERN needs 2 parameters, the pattern and the number of lines.")
        else
          @process_node = Rbetl::PatternContext.new(@input_node,params[1],params[2].to_i,compare)
        end
      elsif process =~ /^BETWEEN/
        split_char = process[7]
        params = process.split(split_char)
        if params[1].nil? || params[2].nil?
          error("Process BETWEEN needs 2 parameters, Start Pattern and End Pattern.")
        else
          @process_node = Rbetl::PatternBetween.new(@input_node,params[1],params[2],compare)
        end
      else
        error("Don't know how about this process definition #{process}")
      end
    end
    if options[:combine].nil?
      @combine_node = @process_node
    else
      @combine_node = Rbetl::CombineLines.new(@process_node,options[:combine])
    end
    if options[:output].nil?
      @output_node = @combine_node
    else
      if options[:output] =~ /JSONTABLE/
        @output_node = Rbetl::JsonTable.new(@combine_node)
      else
        re = /FILE:(.*)/
        match = re.match(options[:output])
        if match
          @output_node = Rbetl::OutputFile.new(@combine_node,match[1])
        end

      end
    end
    @output_node.publish
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  description "rbetl processes text in a growing number of ways"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  on("-i INPUT_STREAM","--input", "input stream defaults to stdin")
  on("-r", "--regex", "use regex in process patterns, defaults to literal strings")
  on("-p PROCESS","--process", "process defaults to passthrough",
      "'PATTERN/pattern/n'            line with pattern and n lines after,  '/' can be replaced with any other char",
      "'BETWEEN/pattern1/pattern2'    line with pattern1 to line with pattern2")
  on("-o OUTPUT_STREAM","--output", "output stream defaults to stdout",
      "'FILE:filename'                output to a file",
      "'JSONTABLE'                    outputs a hash and array of table name and table data as JSON to stdout")
  on("-c SEPERATOR","--combine", "combine multiline matches into a single line")

  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Rbetl::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
